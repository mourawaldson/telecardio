<?xml version="1.0" encoding="utf-8"?>

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="258" height="264" 
	backgroundColor="#ffffff"
 	borderStyle="solid"
	title="Selecione Opções"
	creationComplete="onCreationComplete()">
	<mx:Panel width="100%" height="100%" layout="absolute" title="Page range" id="PageRangePanel">
		<mx:RadioButtonGroup id="PageRange"/>
		<mx:RadioButton x="10.0" y="10.0" label="Todas" groupName="PageRange" selected="true" id="All"/>
		<mx:RadioButton x="10.0" y="34.0" label="Página Atual" groupName="PageRange" selected="false" id="Current"/>
		<mx:RadioButton x="10.0" y="58.0" label="Páginas:" groupName="PageRange" selected="false" id="Range"/>
		<mx:TextInput x="91" y="56" width="105" id="Pages"/>
		<mx:Text x="10" y="95" text="Entre o número da página e/ou o range de páginas separados por virgula. Por exemplo 1,3,5-12" width="198" height="54"/>
	</mx:Panel>
	<mx:ApplicationControlBar>
		<mx:Button label="Imprimir" width="89" click="onPrintClick()" id="PrintButton"/>
		<mx:Button label="Cancelar" width="90" click="onCancelClick()"/>
	</mx:ApplicationControlBar>	
	
	<mx:Script>
		<![CDATA[
			
		import lib.report.org.utils.IntegerUtils;
		import lib.report.org.utils.PageRangeManager;
		import lib.report.org.utils.PageRangeParser;
		import lib.report.org.events.PageRangeEvent;
		
		import mx.events.CloseEvent;
		import mx.events.FlexEvent;
		import mx.controls.Alert;
		import mx.managers.PopUpManager;
		
		private var _currentPage : int = -1;
		
		public function set currentPage(value : int) : void
		{
			_currentPage = value;			
		}
		
		private function onPrintClick():void
		{
			var pageRangeManager : PageRangeManager;
			var range : Array;
			
			switch (PageRange.selection)
			{
				case All:
					pageRangeManager = new PageRangeManager(PageRangeManager.ALL);
					break;
					
				case Current:
					range = new Array();
					range.push(_currentPage);
					pageRangeManager = new PageRangeManager(PageRangeManager.CURRENT, range);
					break;
					
				case Range:
					range = PageRangeParser.parsePageRange(Pages.text);
					if (range != null)
					{
						pageRangeManager = new PageRangeManager(PageRangeManager.RANGE, range);
					}
					else
					{
						showAlert("Range de páginas incorreto.");
						return ;
					}
					break;
			}
			
			owner.dispatchEvent(new PageRangeEvent(pageRangeManager));
			PopUpManager.removePopUp(this);
		}
		
		private function onCancelClick():void
		{
			PopUpManager.removePopUp(this);
		}
		
		private function showAlert(msg: String) : void
		{
			Alert.show(msg);
		}
		
		public function onCreationComplete() : void
		{
			PrintButton.setFocus();
			addEventListener(KeyboardEvent.KEY_UP, KeyPressed);
			Pages.addEventListener(FocusEvent.FOCUS_IN, PagesFocusIn);
		}

		protected function KeyPressed(event : KeyboardEvent):void 
		{
			if ( event.keyCode == Keyboard.ESCAPE )				
				onCancelClick();
			else if ( event.keyCode == Keyboard.ENTER )				
				onPrintClick();
		}		
		
		protected function PagesFocusIn(event : FocusEvent):void
		{
			PageRange.selection = Range;
		}		
		
		]]>
	</mx:Script>
	
</mx:TitleWindow>
